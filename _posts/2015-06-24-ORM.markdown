---
layout: post
title:  "My ORM"
date:   2015-06-24 18:58:19
categories: ruby sql
---

## My ORM
#### What is an ORM?
An ORM, or Object-relational mapping is a programming technique for converting data between incompatible type systems in object-oriented programming languages. In our case, we are using ORM to bridge the gap between Ruby and SQL database. ORM has sort of a mantra that it lives by, CRUD. Create, Read, Update or Destory the information. 

### Retreiving information with ORM
Ruby methods are created to call information from the database. Information can be manipulated by Ruby in several ways. Calling all information from a table or selecting one row, or selecting one value from an attribute of a row. We can also decide how we want that information brought back to us. Typically we asked it to return hashes, which then we can convert to objects for better readability for our programs. 

<b>For Example, my method below details how I retrieve all rows from a specific table.</b>

{% highlight ruby %}
def all
    
    table_name = self.to_s.pluralize.underscore
    
    results = CONNECTION.execute("SELECT * FROM #{table_name}")

    results_as_objects = []
    
    results.each do |result_hash|
      results_as_objects << self.new(result_hash)
    end
    
    return results_as_objects
  end
{% endhighlight %}

The <i>all method</i>is a general Class method. It is stored in my module, DatabaseClassMethods, which I can use with any of my Classes to extract data from SQL. This method returns each row's attribute's values defined in the table columns. <b>Since Ruby doesn't have a table data structure, we've asked SQL to return the data as Hashes within a Hash. The Hash of each row includes the key (column name) and the corresponding value for each row. The second part of method then iterates over the Hash of data and stores the data into an Array of Objects. </b>




